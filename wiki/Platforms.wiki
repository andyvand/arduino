#summary the format of files and folders in an Arduino hardware platform

As of version 0018, the Arduino environment supports multiple platforms: collections of boards, bootloaders, cores, and programmers.  The built-in *arduino* platform comes built in to the distribution; others may be installed in the *hardware* sub-folder of the sketchbook folder.  This document describes the structure and organization of the files and folders in such a platform.

= Boards =

The Arduino environment supports multiple target boards with different chips (currently, only AVRs), CPU speeds, or bootloaders.  These are defined in boards.txt.  A board is specified by multiple variables prefixed with the same keyword (shown here as _BOARD_):

 * _BOARD_.name: the name to display in the *Boards* menu

Variables controlling the process of building sketches for the board:

 * _BOARD_.build.mcu: the microcontroller on the board (e.g. "atmega328" or "atmega1280").

 * _BOARD_.build.f_cpu: the clock speed at which the microcontroller operates (normally "16000000L", or, for an ATmega168 running on its internal clock, "8000000L").

 * _BOARD_.build.core: the location of the core to link sketches against when compiling for the board. This may be the name of a folder in the *core* sub-folder of the platform (e.g. "arduino") or a value of the format _platform_:_core_, where _platform_ is the name of the folder of another platform and _core_ is a folder in that platform's *core* folder.

Also useful is this setting in the main preferences.txt file:

 * build.verbose: whether or not to print debugging messages while building a sketch (e.g. "false").  If true, will print the complete command line of each external command executed as part of the build process.

_Note:_ that in Arduino 0004 and later, build.extension is unused - the main sketch file is always treated as a .cpp file.

Variables controlling the upload process:

 * _BOARD_.upload.protocol: the protocol that avrdude should use to talk to the board (typically "stk500").

 * _BOARD_.upload.speed: the speed (baud rate) avrdude should use when uploading sketches (typically "19200").

 * _BOARD_.upload.maximum_size: the maximum size for a sketch on the board (dependent on the chip and the size of the bootloader).

And in the main preferences file:

 * upload.verbose: whether or not to dump debugging messages while upload a sketch to a board (defaults to "false").

Variables controlling the process of burning a bootloader onto the board:

= Bootloaders = 

The *bootloaders* sub-folder of a platform contains the bootloaders for the boards in the platform.  These should appear as .hex files in a sub-folder of the *bootloaders* folder.  Often, the source code for the bootloader is also included, along with a Makefile for building the .hex file.  

= Cores =

A core is a set of .c, .cpp, and .h files that implement the basic Arduino functions for a platform.  Each core appears as a sub-folder of the *cores* sub-folder of a platform.

A core should include at least the following files:

 * WProgram.h: an #include statement for this header file is automatically inserted into each sketch as part of the BuildProcess.  It should contain declarations for the functions, constants, and types in the core.

 * main.cpp: a conventional location in which to specify the *main()* function of the sketch.  It should call *setup()* once and *loop()* over and over again.

= Programmers =

Programmers may be specified in the *programmers.txt* file in a platform.  This file has a format similar to the *boards.txt* file, but with the following variables:

 * _PROGRAMMER_.name: the name to display in the *Burn Bootloader* menu

 * _PROGRAMMER_.communication: either "serial" for programmers that use a serial device (to be selected from the *Tools > Serial Port* menu), "usb" for those that use the "-P usb" parameter to avrdude, or omitted for other programmer types.

 * _PROGRAMMER_.protocol: the programmer's protocol, passed as the "-c" parameter to avrdude.

 * _PROGRAMMER_.force: whether or not to send the "-F" parameter to avrdude, which ignores signature mismatches.  Defaults to false if omitted.

 * _PROGRAMMER_.speed: a baud rate to send as the "-b" parameter to avrdude (optional).