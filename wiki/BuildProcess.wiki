#summary The process the Arduino environment uses to build a sketch.

= Overview =

A number of things have to happen for your Arduino code to get onto the Arduino board.  First, the Arduino environment performs some small transformations to make sure that the code is correct C++.  It then gets passed to a compiler (avr-gcc), which turns the human readable code into machine readable instructions (or object files).  Then, your code gets combined with (linked against), the standard Arduino libraries that provide basic functions like digitalWrite() or Serial.print().  The result is a single Intel hex file, which contains the specific bytes that need to be written to the program memory of the chip on the Arduino board.  This file is then uploaded to the board: transmitted over the USB or serial connection via the bootloader already on the chip or with external programming hardware.

= Multi-file sketches =

A sketch can contain multiple files (tabs).  To manage them, click on the right-facing arrow just above the scroll bar near the top of the environment.  Tabs have one of four extensions: no extension, .c, .cpp, or .h (if you provide any other extension, the period will be converted to an underscore).  When your sketch is compiled, all tabs with no extension are concatenated together to form the "main sketch file".  Tabs with .c or .cpp extensions are compiled separately.  To use tabs with a .h extension, you need to #include it (using "double quotes" not <angle brackets>).  

= Pre-Processing =

The Arduino environment performs a few transformations to your main sketch file (the concatenation of all the tabs in the sketch without extensions) before passing it to the avr-gcc compiler.  

First, #include "WProgram.h" is added to your sketch.  This header file (found in the core folder for the currently selected board) includes all the definitions needed for the standard Arduino core. Next, the environment searches for function definitions within your main sketch file and creates declarations (prototypes) for them.  The #include statement and function prototypes are inserted after any comments or pre-processor statements (#includes or #defines), but before any other statements (including type declarations).  This means that if you want to use a custom type as a function argument, you should declare it within a separate header file.  Also, this generation isn't perfect: it won't create prototypes for functions that have default argument values, or which are declared within a namespace or class. 

= Compilation =

Sketches are compiled by avr-gcc and avr-g++.

The include path includes the sketch's directory, the core folder (e.g. the hardware/arduino/core/arduino/ sub-folder of the Arduino application) and the avr include directory (hardware/tools/avr/avr/include/), as well as any library directories (in hardware/libraries/) which contain a header file which is included by the main sketch file.

When you verify or upload a sketch, it is built in a temporary directory in the system temp directory (e.g. /tmp on the Mac).

The .c and .cpp files of the target are compiled and output with .o extensions to this directory, as is the main sketch file and any other .c or .cpp files in the sketch and any .c or .cpp files in any libraries which are #included in the sketch.

These .o files are then linked together into a static library and the main sketch file is linked against this library.  Only the parts of the library needed for your sketch are included in the final .hex file, reducing the size of most sketches.

The .hex file is the final output of the compilation which is then uploaded to the board.  The .hex file is written to /tmp (on Mac and Linux) or \Documents and Settings\_USER_\Local Settings\Temp (on Windows).

If build.verbose is set to true in the main preferences file, or if shift is held down when clicking the *Compile / Verify* toolbar button, the complete command line of each external command executed as part of the build process will be printed in the editor console.

_Note:_ that in Arduino 0004 and later, build.extension is unused - the main sketch file is always treated as a .cpp file.


= Uploading =

Sketches are uploaded by avrdude.  The upload process is also controlled by variables in the boards and main preferences files.  See the [Platforms platforms] page for details.

If upload.verbose is set to true in the main preferences file, or if the shift key is held down when clicking the *Upload* toolbar button, debugging information will be output to the editor console, including avrdude command lines and verbose output.