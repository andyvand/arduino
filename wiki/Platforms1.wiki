#summary An overview of the platform architecture proposed for Arduino 1.5

*An overview of the platform architecture proposed for Arduino 1.5*

The hardware folder is split into multiple levels of organization:

  * _package_ (or better packager): a folder containing board definitions and code for one or more architectures (e.g. arduino)
  * _platform_: a microcontroller architecture (e.g. avr or sam)
  * _core_: a core for a single platform (e.g. arduino)

The idea is that third-parties can supply a single package which provide support for all their hardware, across multiple microcontroller architectures.  

Within the user's Arduino sketchbook folder, hardware/_PACKAGE_/_PLATFORM_/ contains (all targeting the containing platform but possibly referring to other packages):
  * a _boards.txt_ file containing boards definitions
  * a _cores_ folder containing one or more folders with the implementation of the Arduino API
  * a _platform.txt_ file that contains build process definitions (e.g. compiler and command-line arguments)
  * a _programmers.txt_ file with programmer definitions
  * a _system_ folder containing system libraries (e.g. those supplied by the microcontroller manufacturer)
  * a _tools_ folder containing the toolchain binaries
  * a _variants_ folder, containing one or more folders with code specific to particular hardware variations
  * a _bootloaders_ folder
  * a _libraries_ folder

This means that to update an existing 1.0 core you need to move, for example, all files contained in hardware/arduino/ to a new hardware/arduino/avr/ folder.

*Example*

If the Arduino hardware folder were installed as third-party hardware folder, it would be organized like this:
  * hardware/*arduino*/ - the root for the Arduino hardware
  * hardware/arduino/*avr*/ - contains the definitions for the AVR-based Arduino boards
  * hardware/arduino/avr/*boards.txt* - definitions of the AVR boards
  * hardware/arduino/avr/*platform.txt* - definitions of the AVR build process
  * hardware/arduino/avr/*cores/arduino*/ - the core providing the Arduino API for AVR boards
  * hardware/arduino/*sam*/ - support for the ARM-based Arduino boards
  * hardware/arduino/sam/*boards.txt* - definitions of the ARM boards
  * hardware/arduino/sam/*platform.txt* - definitions of the ARM build process
  * hardware/arduino/sam/*cores/arduino*/ - the core providing the Arduino API for ARM boards
  * hardware/arduino/sam/*system*/... - this folder contains libraries provided from chip manufacturer, and linked through the build process defined in _platform.txt_

Let's suppose we want to add two new cores for AVR: we should put them in the following place:
  * hardware/arduino/avr/cores/*C*/ - a hypothetical core providing support for straight AVR C on Arduino boards
  * hardware/arduino/avr/cores/*rtos*/ - a hypothetical core providing support for an RTOS on Arduino boards

Note that the libraries sub-folder of the Arduino sketchbook folder will still be supported (for libraries not associated with specific hardware).

These elements refer to each other in various ways.  For example, the boards.txt file contains these preferences:
  * _BOARD_.build.core
  * _BOARD_.build.variant

These may be within another package, but not a different platform (i.e. you can't have an ARM boards.txt file that refers to an AVR core).  The syntax is _PACKAGE_:_CORE_ or _PACKAGE_:_VARIANT_.  The _PACKAGE_: is optional; if omitted, the _CORE_ or _VARIANT_ value is assumed to be within the same package as the boards.txt file. 

In general, the search order (e.g. for libraries) should be:
  # the package containing the boards.txt file defining the active board
  # the package containing the variant used by the active board
  # the package containing the core used by the active board
  # a package containing a platform.txt file for the active board's platform

When compiling the user sketch, the include path should contain the core's folder (i.e. a sub-folder of the cores/ folder), the system/ folder, the variant's folder (i.e. a sub-folder of the variants/ folder), and any relevant library folders (i.e. sub-folders of the various libraries/ folders).  Source files contained within the sketch, the core's folder, the variant's folder, and the library folders, but not the system folder should be compiled with the sketch.  The sketch should be linked against any lib files in those same folders.  (That is, the files in the system folder should be pre-compiled before distribution of the package, with resulting lib files placed in the appropriate core or variant folders - not compiled with the sketch.

Questions:
  * Should the per-board compilation flags in boards.txt override or be appended (or pre-pended) to those in the platform.txt file?  (We might be able to override relevant flags by appearing before or after them in the command line.)
  * What about core files that are shared between platforms (e.g. String, Stream)?  Where do they go?
  * How does the upload process get specified?