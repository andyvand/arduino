#summary An overview of the platform architecture proposed for post-Arduino 1.0

There are multiple levels of organization:

  * _package_: a folder containing board definitions and code for one or more architectures (e.g. arduino)
  * _platform_: a microcontroller architecture (e.g. avr)

The idea is that third-parties can supply a single package which provide support for all their hardware, across multiple microcontroller architectures.  

Within the user's Arduino sketchbook folder, hardware/_PACKAGE_/_PLATFORM_/ contains (all targeting the containing platform but possibly referring to other packages):
  * boards.txt: board definitions
  * bootloaders: 
  * cores: one or more folders containing implementations of the Arduino API
  * libraries
  * platform.txt: build process definitions (e.g. compiler command-line arguments)
  * programmers.txt: programmer definitions
  * system: system libraries (e.g. those supplied by the microcontroller manufacturer)
  * tools: the toolchain binaries
  * variants: one or more folders containing code specific to particular hardware variations

For example, (if it were installed as third-party hardware) the Arduino hardware would be organized like this:
  * hardware/arduino/ - the root for the Arduino hardware
  * hardware/arduino/avr/ - contains the definitions for the AVR-based Arduino boards
  * hardware/arduino/avr/cores/arduino/ - the core providing the Arduino API for AVR boards
  * hardware/arduino/avr/cores/c/ - a hypothetical core providing support for straight AVR C on Arduino boards
  * hardware/arduino/avr/cores/rtos/ - a hypothetical core providing support for an RTOS on Arduino boards
  * hardware/arduino/arm/ - support for the ARM-based Arduino boards

Note that the libraries sub-folder of the Arduino sketchbook folder will still be supported (for libraries not associated with specific hardware).

These elements refer to each other in various ways.  For example, the boards.txt file contains these preferences:
  * _BOARD_.build.core
  * _BOARD_.build.variant

These may be within another package, but not a different platform (i.e. you can't have an ARM boards.txt file that refers to an AVR core).  The syntax is _PACKAGE_:_CORE_ or _PACKAGE_:_VARIANT_.  The _PACKAGE_: is optional; if omitted, the _CORE_ or _VARIANT_ value is assumed to be within the same package as the boards.txt file. 

In general, the search order (e.g. for libraries) should be:
  # the package containing the boards.txt file defining the active board
  # the package containing the variant used by the active board
  # the package containing the core used by the active board
  # a package containing a platform.txt file for the active board's platform

When compiling the user sketch, the include path should contain the core's folder (i.e. a sub-folder of the cores/ folder), the system/ folder, the variant's folder (i.e. a sub-folder of the variants/ folder), and any relevant library folders (i.e. sub-folders of the various libraries/ folders).  Source files contained within the sketch, the core's folder, the variant's folder, and the library folders, but not the system folder should be compiled with the sketch.  The sketch should be linked against any lib files in those same folders.  (That is, the files in the system folder should be pre-compiled before distribution of the package, with resulting lib files placed in the appropriate core or variant folders - not compiled with the sketch.