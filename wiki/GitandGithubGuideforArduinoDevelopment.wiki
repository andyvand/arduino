=Git and Github guide for Arduino Development=

Install git locally and create an account on github
Check out Get Started with Git and Github
http://help.github.com/

For those with Subversion background there's a Crash Course:
http://git.or.cz/course/svn.html

==To get started you’ll need to:==
  #Take a [http://gitref.org/ quick crash course] on Git
  #[http://help.github.com/git-installation-redirect Install Git]
  #[http://help.github.com/key-setup-redirect Generate a keypair]
    **http://help.github.com/mac-key-setup/
    **http://help.github.com/linux-key-setup/
    **http://help.github.com/msysgit-key-setup/
    ***You need create this keypair to authorize your commits by machine, and your user account.
  #[http://help.github.com/git-email-settings Set your user and email in git]

{{{
git config --global user.name "Your Name"
git config --global user.email you@example.com
}}}

You are now up and running in with Github. At this point there are three major options for development.  You can create you're own repository. You can clone the Arduino project. You can fork the Arduino project.


==Create your own repository==
http://help.github.com/creating-a-repo

==Clone the Arduino project==
{{{
git clone git@github.com:arduino/Arduino.git
}}}
If you don’t need the entire project history
{{{
git clone git@github.com:arduino/Arduino.git --depth 1
}}}
==Fork the Arduino for development==
http://help.github.com/forking/



==There are three development patterns to follow.==

  # Fix a single file:
    * Clone the repository, update to the master, edit a single file, and submit file to be considered for updating in the Bug System. The problem: This is really good for only quick and dirty single file fixes. It's also hard to track, and merge if the file get's changed by more than one person, and after the version is made.

  # Submit a patch:
    * Clone the repository, update to the master, make edits, and then use git diff, or git format-patch to generate a patch set that can be attached to the bug in the bug system. This is a nice trackable way to make changes and be able to effect multiple files. This is good for most cases, there is still a chance the some one else change would effect your patch, but it's less likely. Your changes are only stored on your local system.

  # Fork the project:
    * Create a fork of Arduino project, then git clone your fork, and start working. This technique allows for changes to submitted as patches, and/or pull requests. With this mode you can work towards long term goals, and major changes more easily. Also, it's fine for short term patches, and pulls. 